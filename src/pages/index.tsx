import Head from "next/head";
import Header from "@/components/Header";
import languages from "@/utils/languages";
import { Fira_Code } from "next/font/google";
import { useFormik } from "formik";
import MonacoEditor from "@/components/Editor";
import SyntaxHighlighter from "react-syntax-highlighter";
import { nightOwl } from "react-syntax-highlighter/dist/cjs/styles/hljs";
import axios from "axios";
import LoadingDots from "@/components/LoadingDots";
import ClipboardJS from "clipboard";
import { useState } from "react";

// Fira code font for codes
const firaCode = Fira_Code({ weight: ["400"], subsets: ["latin"] });

interface myFormValues {
  inputLang: string;
  outputLang: string;
  inputCode: string;
  outputCode: string;
}

export default function Home() {
  const [copied, setCopied] = useState(false);

  const initialValues: myFormValues = {
    inputLang: "javascript",
    outputLang: "python",
    inputCode: "console.log('Hello world')",
    outputCode: "",
  };

  const formik = useFormik({
    initialValues,
    onSubmit: async (values, action) => {
      await convertCode(values);
      action.setSubmitting(false);
    },
  });

  const handleInputCodeChange = (value: string | undefined): void => {
    formik.setFieldValue("inputCode", Boolean(value) ? value : "");
  };

  const convertCode = async (data: myFormValues) => {
    try {
      const res = await axios.post(
        "/api/convert",
        {
          inputLang: data.inputLang,
          outputLang: data.outputLang,
          inputCode: data.inputCode,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (res.status === 200) {
        formik.setFieldValue("outputCode", res.data.outputCode.content);
      }
    } catch (error) {
      console.log(error);
      alert(error instanceof Error && error.message);
    }
  };

  const handleCopy = () => {
    try {
      navigator.clipboard.writeText(formik.values.outputCode);
      setCopied(true);
    } catch (error) {
      console.log(error);
    } finally {
      setTimeout(() => {
        setCopied(false);
      }, 2000);
    }
  };

  return (
    <>
      <Head>
        <title>TransCode</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className="px-6 py-3 md:px-10 md:py-5 relative">
        <form className="w-full relative" onSubmit={formik.handleSubmit}>
          <div className="flex flex-col md:flex-row md:gap-10 gap-3">
            {/* Select input language */}
            <div className="flex items-center justify-between w-full gap-4">
              <label htmlFor="inputLang" className="text-lg font-semibold">
                From language:
              </label>
              <select
                name="inputLang"
                id="inputLang"
                value={formik.values.inputLang}
                onChange={formik.handleChange}
                className="flex-1 bg-slate-500 px-3 py-2 text-white rounded-lg outline-pink-500"
              >
                {languages.map((lang, i) => (
                  <option value={lang.toLowerCase()} key={i}>
                    {lang}
                  </option>
                ))}
              </select>
            </div>

            {/* Select output language */}
            <div className="flex items-center justify-between w-full gap-4">
              <label htmlFor="outputLang" className="text-lg font-semibold">
                To language:
              </label>
              <select
                name="outputLang"
                id="outputLang"
                value={formik.values.outputLang}
                onChange={formik.handleChange}
                className="flex-1 bg-slate-500 px-3 py-2 text-white rounded-lg outline-pink-500"
              >
                {languages.map((lang, i) => (
                  <option value={lang.toLowerCase()} key={i}>
                    {lang}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Convert button */}
          <button
            className={`bg-pink-500 max-w-xs w-full hover:shadow-md mx-auto block font-bold mt-3 text-white transition-all active:bg-pink-600 px-6 py-2 rounded-lg ${
              formik.isValidating === false &&
              formik.isSubmitting === true &&
              "pointer-events-none"
            }`}
            type="submit"
          >
            {formik.isValidating === false && formik.isSubmitting === true ? (
              <LoadingDots color="white" style="large" />
            ) : (
              <span>Convert code &rarr;</span>
            )}
          </button>

          <div className="flex flex-col gap-4 md:flex-row mt-5 mx-auto">
            {/* Input code */}
            <div
              className={`w-full h-96 md:h-[32rem] max-w-2xl xl:max-w-3xl bg-pink-300 p-3 rounded-xl relative`}
            >
              <MonacoEditor
                language={formik.values.inputLang}
                value={formik.values.inputCode}
                onChange={handleInputCodeChange}
              />
            </div>

            {/* Output code */}
            <div className="w-full h-96 md:h-[32rem] max-w-2xl bg-pink-300 p-3 rounded-xl relative">
              <div
                className={`bg-[#011627] outline-none w-full h-full resize-none text-white p-2 hover:opacity-95 transition-all rounded-lg ${firaCode.className}`}
              >
                <SyntaxHighlighter
                  language={formik.values.outputCode}
                  style={nightOwl}
                >
                  {formik.values.outputCode}
                </SyntaxHighlighter>
              </div>

              <button
                className="flex items-center gap-1 border border-solid border-white active:bg-pink-600 bg-pink-500 absolute top-5 right-5 px-2 py-1 rounded-md"
                type="button"
                onClick={handleCopy}
              >
                {copied ? (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="w-4 h-4 text-white"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M4.5 12.75l6 6 9-13.5"
                    />
                  </svg>
                ) : (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth={1.5}
                    stroke="currentColor"
                    className="w-4 h-4 text-white"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"
                    />
                  </svg>
                )}

                <span className="text-white text-sm">
                  {copied ? "Copied" : "Copy"}!
                </span>
              </button>
            </div>
          </div>
        </form>
      </main>
    </>
  );
}
